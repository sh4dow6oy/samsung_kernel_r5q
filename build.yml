name: Build Samsung Kernel (SM-G770F)

on:
  workflow_dispatch:
    inputs:
      model:
        description: "Device model (e.g., g770f)"
        required: true
        default: g770f

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 🔹 Checkout kernel source
      - name: Checkout kernel source
        uses: actions/checkout@v3
        with:
          repository: sh4dow6oy/samsung_kernel
          ref: SM-G770F
          submodules: recursive
          fetch-depth: 0

      # 🔹 Add upstream not_r8q
      - name: Add not_r8q upstream
        run: |
          git remote add upstream https://github.com/skye-tachyon/not_r8q.git
          git fetch upstream
          git merge upstream/main --allow-unrelated-histories -m "Merge not_r8q upstream" || echo "Merge conflicts? Resolve manually"

      # 🔹 Install dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential git bc bison flex libssl-dev libncurses5-dev \
            libelf-dev wget tar xz-utils ccache lld llvm unzip zip zstd

      # 🔹 Setup Android Clang (from android.googlesource.com)
      - name: Setup Android Clang toolchain
        run: |
          TOOLCHAIN_PATH="$PWD/toolchain/clang"
          mkdir -p "$TOOLCHAIN_PATH"
          cd "$TOOLCHAIN_PATH"
          # Latest Android Clang (Android 15 / r530567)
          wget -O clang-r530567.tar.gz https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r530567.tar.gz
          tar -xzf clang-r530567.tar.gz
          TOOLCHAIN_BIN="$TOOLCHAIN_PATH/bin"
          echo "PATH=$TOOLCHAIN_BIN:$PATH" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "LD=ld.lld" >> $GITHUB_ENV

            # 🔹 Setup GCC 12.2 aarch64
      - name: Setup GCC 12.2 aarch64
        run: |
          GCC_PATH="$PWD/toolchain/gcc-12.2.0"
          mkdir -p "$GCC_PATH"
          wget -O gcc-12.2.0.tar.gz https://ftp.gnu.org/gnu/gcc/gcc-12.2.0/gcc-12.2.0.tar.gz
          tar -xvzf gcc-12.2.0.tar.gz -C "$GCC_PATH" --strip-components=1
          
          # Build GCC (optional, if prebuilt not available)
          cd "$GCC_PATH"
          ./contrib/download_prerequisites
          mkdir build && cd build
          ../configure --prefix="$GCC_PATH/install" --enable-languages=c,c++ --disable-multilib
          make -j$(nproc)
          make install
          
          GCC_BIN="$GCC_PATH/install/bin"
          echo "PATH=$GCC_BIN:$PATH" >> $GITHUB_ENV
          echo "CROSS_COMPILE=$GCC_BIN/aarch64-linux-gnu-" >> $GITHUB_ENV


      # 🔹 Clone AOSP core (for liblog)
      - name: Clone AOSP core if missing
        run: |
          if [ ! -d "$PWD/aosp/system/core" ]; then
            mkdir -p aosp
            git clone https://android.googlesource.com/platform/system/core aosp/system/core
          fi

      # 🔹 Detect defconfig
      - name: Detect defconfig
        id: detect-config
        run: |
          MODEL=${{ github.event.inputs.model }}
          DEFCONFIG=$(ls arch/arm64/configs/*_${MODEL}_defconfig 2>/dev/null || ls arch/arm64/configs/*_defconfig | head -n1)
          if [ -z "$DEFCONFIG" ]; then
            echo "❌ No defconfig found for model $MODEL"
            exit 1
          fi
          echo "DEFCONFIG_NAME=$(basename $DEFCONFIG)" >> $GITHUB_OUTPUT

      # 🔹 Clean output directory
      - name: Clean output directory
        run: rm -rf out

      # 🔹 Configure kernel
      - name: Configure kernel
        run: |
          make O=out ARCH=arm64 ${{ steps.detect-config.outputs.DEFCONFIG_NAME }} CC=$CC CROSS_COMPILE=$CROSS_COMPILE

      # 🔹 Patch kernel config (disable stack protector)
      - name: Patch kernel config
        run: |
          sed -i 's/CONFIG_CC_STACKPROTECTOR_STRONG=y/# CONFIG_CC_STACKPROTECTOR_STRONG is not set/g' out/.config || true
          sed -i 's/CONFIG_CC_STACKPROTECTOR=y/# CONFIG_CC_STACKPROTECTOR is not set/g' out/.config || true
          echo "CONFIG_CC_STACKPROTECTOR_NONE=y" >> out/.config
          make O=out ARCH=arm64 olddefconfig

      # 🔹 Build kernel
      - name: Build kernel
        run: |
          make O=out ARCH=arm64 \
            CC=clang \
            CROSS_COMPILE=$CROSS_COMPILE \
            LD=ld.lld \
            KCFLAGS="-fno-stack-protector" \
            KBUILD_CFLAGS="-fno-stack-protector" \
            KBUILD_CFLAGS_MODULE="-fno-stack-protector" \
            -j$(nproc)

      # 🔹 Upload kernel artifacts
      - name: Upload kernel image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: out/arch/arm64/boot/Image.gz-dtb
