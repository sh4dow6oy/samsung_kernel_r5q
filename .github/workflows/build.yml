name: Build Samsung Kernel (SM-G770F)

on:
  workflow_dispatch:
    inputs:
      model:
        description: "Device model (e.g., g770f)"
        required: true
        default: g770f

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # 🔹 Checkout kernel source
      - name: Checkout kernel source
        uses: actions/checkout@v4
        with:
          repository: sh4dow6oy/samsung_kernel_r5q
          ref: master
          submodules: recursive
          fetch-depth: 0

      # 🔹 Install dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential git bc bison flex libssl-dev libncurses5-dev \
            libelf-dev wget tar xz-utils ccache lld llvm unzip zip zstd \
            python3 python3-distutils python3-setuptools

      # 🔹 Setup Clang and GCC toolchains
      - name: Setup Clang and GCC
        run: |
          # Clang
          mkdir -p $GITHUB_WORKSPACE/toolchain/clang
          curl -L https://github.com/ravindu644/Android-Kernel-Tutorials/releases/download/toolchains/clang-4639204.tar.gz | tar -xz -C $GITHUB_WORKSPACE/toolchain/clang
          CLANG_PATH=$(find $GITHUB_WORKSPACE/toolchain/clang -maxdepth 1 -type d -name "clang*")
          echo "✅ Clang found at $CLANG_PATH/bin/clang"
          echo "PATH=$CLANG_PATH/bin:$PATH" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "LD=ld.lld" >> $GITHUB_ENV
          echo "LLVM=1" >> $GITHUB_ENV
          echo "LLVM_IAS=1" >> $GITHUB_ENV
          $CLANG_PATH/bin/clang --version

          # GCC
          mkdir -p $GITHUB_WORKSPACE/toolchain/gcc
          curl -L https://github.com/ravindu644/Android-Kernel-Tutorials/releases/download/toolchains/aarch64-linux-android-4.9.tar.gz | tar -xz -C $GITHUB_WORKSPACE/toolchain/gcc
          GCC_PATH=$(find $GITHUB_WORKSPACE/toolchain/gcc -maxdepth 1 -type d -name "aarch64*")
          echo "✅ GCC found at $GCC_PATH/bin"
          echo "PATH=$GCC_PATH/bin:$PATH" >> $GITHUB_ENV
          echo "CROSS_COMPILE=$GCC_PATH/bin/aarch64-linux-android-" >> $GITHUB_ENV
          $GCC_PATH/bin/aarch64-linux-android-gcc --version

      # 🔹 Detect defconfig
      - name: Detect defconfig
        id: detect-config
        run: |
          MODEL=${{ github.event.inputs.model }}
          DEFCONFIG=$(ls arch/arm64/configs/*_${MODEL}_defconfig 2>/dev/null || ls arch/arm64/configs/*_defconfig | head -n1)
          if [ -z "$DEFCONFIG" ]; then
            echo "❌ No defconfig found for model $MODEL"
            exit 1
          fi
          echo "DEFCONFIG_NAME=$(basename $DEFCONFIG)" >> $GITHUB_OUTPUT

      # 🔹 Clean output
      - name: Clean output
        run: rm -rf out

      # 🔹 Configure kernel
      - name: Configure kernel
        run: |
          make O=out ARCH=arm64 ${{ steps.detect-config.outputs.DEFCONFIG_NAME }} CC=$CC CROSS_COMPILE=$CROSS_COMPILE

      # 🔹 Patch kernel config
      - name: Patch kernel config
        run: |
          CONFIG=out/.config
          set_config() {
            key="$1"
            val="$2"
            if grep -qE "^${key}=" "$CONFIG"; then
              sed -i "s/^${key}=.*/${key}=${val}/" "$CONFIG"
            elif grep -qE "^# ${key} is not set$" "$CONFIG"; then
              sed -i "s/^# ${key} is not set$/${key}=${val}/" "$CONFIG"
            else
              echo "${key}=${val}" >> "$CONFIG"
            fi
          }

          # Enable BPF
          set_config "CONFIG_BPF" "y"
          set_config "CONFIG_BPF_SYSCALL" "y"
          set_config "CONFIG_BPF_JIT" "y"
          set_config "CONFIG_CGROUP_BPF" "y"
          set_config "CONFIG_BPF_EVENTS" "y"
          set_config "CONFIG_NET_CLS_BPF" "y"
          set_config "CONFIG_NET_ACT_BPF" "y"
          set_config "CONFIG_LIBBPF" "y"
          set_config "CONFIG_BPF_PRELOAD" "y"
          set_config "CONFIG_BPF_LSM" "y"

          # Disable stack protector
          sed -i 's/CONFIG_CC_STACKPROTECTOR_STRONG=y/# CONFIG_CC_STACKPROTECTOR_STRONG is not set/' "$CONFIG" || true
          sed -i 's/CONFIG_CC_STACKPROTECTOR=y/# CONFIG_CC_STACKPROTECTOR is not set/' "$CONFIG" || true
          set_config "CONFIG_CC_STACKPROTECTOR_NONE" "y"

          make O=out ARCH=arm64 olddefconfig

      # 🔹 Build kernel
      - name: Build kernel
        run: |
          make O=out ARCH=arm64 \
            CC=clang \
            CROSS_COMPILE=$CROSS_COMPILE \
            LD=ld.lld \
            LLVM=1 LLVM_IAS=1 \
            KCFLAGS="-fno-stack-protector" \
            KBUILD_CFLAGS="-fno-stack-protector" \
            KBUILD_CFLAGS_MODULE="-fno-stack-protector" \
            -j$(nproc)

      # 🔹 Upload kernel image
      - name: Upload kernel image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: out/arch/arm64/boot/Image.gz-dtb
